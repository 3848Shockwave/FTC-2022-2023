/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;


/**
 * This file contains an minimal example of a Linear "OpMode". An OpMode is a 'program' that runs in either
 * the autonomous or the teleop period of an FTC match. The names of OpModes appear on the menu
 * of the FTC Driver Station. When a selection is made from the menu, the corresponding OpMode
 * class is instantiated on the Robot Controller and executed.
 *
 * This particular OpMode just executes a basic Tank Drive Teleop for a two wheeled robot
 * It includes all the skeletal structure that all linear OpModes contain.
 *
 * Use Android Studio to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list
 */

@TeleOp(name="Main Drive", group="Linear Opmode")

public class Drive extends LinearOpMode {

    // Declare OpMode members.
    
private DcMotor frontRight;
private DcMotor frontLeft;
private DcMotor backRight;
private DcMotor backLeft;
private DcMotor armMotor;
boolean openClose = false;
boolean testclose = false;
Servo servoLeft; 
Servo servoRight;
double movepos =0;

    @Override
    public void runOpMode() {
        

       
        frontRight = hardwareMap.get(DcMotor.class, "frontRight");
        frontLeft = hardwareMap.get(DcMotor.class, "frontLeft");
        backRight = hardwareMap.get(DcMotor.class, "backRight");
        backLeft = hardwareMap.get(DcMotor.class, "backLeft");
        armMotor = hardwareMap.get(DcMotor.class,"armMotor" );
        servoRight = hardwareMap.get(Servo.class, "armServo2");
        servoLeft= hardwareMap.get(Servo.class, "armServo1");

        // Wait for the game to start (driver presses PLAY)
        waitForStart();
        

        // run until the end of the match (driver presses STOP)
        while (opModeIsActive()) {

            // Setup a variable for each drive wheel to save power level for telemetry
          

            
        double righty = 0.7 * -gamepad1.left_stick_y;
        double lefty = 0.7 * gamepad1.right_stick_y;
        
         
        backLeft.setPower(righty);
        frontLeft.setPower(righty);
        backRight.setPower(lefty);
        frontRight.setPower(lefty);
        
         

            // Tank Mode uses one stick to control each wheel.
            // - This requires no math, but it is hard to drive forward slowly and keep straight.
       if (gamepad1.right_bumper){
        backLeft.setPower(-1);
        frontLeft.setPower(1);
        backRight.setPower(-1);
        frontRight.setPower(1);
       }
       if (gamepad1.left_bumper){
         backLeft.setPower(1);
        frontLeft.setPower(-1);
        backRight.setPower(1);
        frontRight.setPower(-1);
       }
    if(gamepad1.right_trigger>0){
    armMotor.setPower(1);
     sleep(50);
   armMotor.setPower(0);
   
    
    }
    if(gamepad1.left_trigger>0){
    armMotor.setPower(-1);
   sleep(50);
   armMotor.setPower(0);
   
    }
  /*  if(gamepad1.a&&!testclose){
        servoLeft.setPosition(movepos);
       movepos= movepos+.1;
       testclose=true;
    }
    if(gamepad1.y){
        testclose=false;
    }
    */
    if(gamepad1.y){
        servoLeft.setPosition(.5);
        servoRight.setPosition(.4);
    }
    if(gamepad1.b && !openClose) {

        if(servoLeft.getPosition() == .5) servoLeft.setPosition(1);
       else servoLeft.setPosition(.5);
    if(servoRight.getPosition() == .2) servoRight.setPosition(.4);
      else servoRight.setPosition(.2);
        openClose = true;
    } 
    else if(!gamepad1.b){ openClose = false;
    }

          

        
        }
    
}
}
